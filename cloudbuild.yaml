# Cloud Build configuration for production deployment
steps:
  # 1. Authenticate to Artifact Registry
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Authenticate
    entrypoint: bash
    args:
      - '-c'
      - |
        gcloud auth configure-docker us-central1-docker.pkg.dev

  # 2. Install dependencies and validate
  - name: 'node:18'
    id: Install and Validate
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "üì¶ Installing dependencies..."
        npm install -g pnpm
        pnpm install --frozen-lockfile
        
        echo "üîç Validating package.json..."
        if ! pnpm run validate-prod; then
          echo "‚ùå Package validation failed"
          exit 1
        fi
        
        echo "‚úÖ Dependencies installed and validated"

  # 3. Generate Database Migrations
  - name: 'node:18'
    id: Generate Migrations
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "üîß Generating database migrations..."
        npm install -g pnpm
        pnpm install --frozen-lockfile
        pnpm run db:generate
        echo "‚úÖ Database migrations generated"

  # 4. Build Application
  - name: 'node:18'
    id: Build Application
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "üèóÔ∏è Building application..."
        npm install -g pnpm
        pnpm install --frozen-lockfile
        
        echo "Building frontend..."
        pnpm run build:client
        
        echo "Building backend..."
        pnpm run build:server
        
        echo "‚úÖ Application built successfully"
        
        # Validate build outputs
        if [ ! -f "dist/public/index.html" ]; then
          echo "‚ùå Frontend build failed - index.html not found"
          exit 1
        fi
        
        if [ ! -f "dist-server/index.mjs" ]; then
          echo "‚ùå Backend build failed - index.mjs not found"
          exit 1
        fi
        
        echo "‚úÖ Build outputs validated"

  # 5. Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: Build Image
    args:
      - 'build'
      - '--platform'
      - 'linux/amd64'
      - '-t'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA'
      - '-t'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:latest'
      - '.'

  # 6. Push Docker images
  - name: 'gcr.io/cloud-builders/docker'
    id: Push Images
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "üì§ Pushing Docker images..."
        docker push us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA
        docker push us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:latest
        echo "‚úÖ Images pushed successfully"

  # 7. Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy to Cloud Run
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "üöÄ Deploying to Cloud Run..."
        
        # Deploy the service
        gcloud run deploy ${_SERVICE_NAME} \
          --image=us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA \
          --region=${_REGION} \
          --platform=managed \
          --allow-unauthenticated \
          --port=8080 \
          --memory=2Gi \
          --cpu=2 \
          --max-instances=100 \
          --min-instances=1 \
          --set-env-vars="DATABASE_URL=sm://roastah/database-url,SESSION_SECRET=sm://roastah/session-secret" \
          --set-secrets="REPLIT_DOMAINS=REPLIT_DOMAINS:latest,REPL_ID=REPL_ID:latest,STRIPE_SECRET_KEY=STRIPE_SECRET_KEY:latest" \
          --quiet

        # Get the service URL
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format="value(status.url)")
        echo "Service URL: ${SERVICE_URL}"

        # Wait for deployment to be ready
        echo "‚è≥ Waiting for deployment to be ready..."
        sleep 30

        # Health check
        echo "üè• Performing health check..."
        for i in {1..10}; do
          if curl -f "${SERVICE_URL}/health" > /dev/null 2>&1; then
            echo "‚úÖ Health check passed"
            break
          else
            echo "‚è≥ Health check attempt $i failed, retrying..."
            sleep 10
          fi
          
          if [ $i -eq 10 ]; then
            echo "‚ùå Health check failed after 10 attempts"
            exit 1
          fi
        done

        echo "‚úÖ Deployment completed successfully"

  # 8. Clean up old revisions (keep last 5)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Prune Old Revisions
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "üßπ Cleaning up old revisions..."
        revs=$(gcloud run revisions list --service=${_SERVICE_NAME} --region=${_REGION} --sort-by="~creationTimestamp" --format="value(metadata.name)")
        to_delete=$(echo "$revs" | tail -n +6)
        for rev in $to_delete; do
          echo "Deleting revision: $rev"
          gcloud run revisions delete $rev --region=${_REGION} --quiet || true
        done
        echo "‚úÖ Revision cleanup completed"

  # 9. Clean up old images (keep last 3)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Prune Old Images
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "üßπ Cleaning up old images..."
        images=$(gcloud artifacts docker images list us-central1-docker.pkg.dev/$PROJECT_ID/roastah --format="value(package)" | sort -r)
        to_delete=$(echo "$images" | tail -n +4)
        for img in $to_delete; do
          echo "Deleting image: $img"
          gcloud artifacts docker images delete "$img" --quiet --delete-tags || true
        done
        echo "‚úÖ Image cleanup completed"

  # 10. Send deployment notification
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Send Notification
    entrypoint: bash
    args:
      - '-c'
      - |
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format="value(status.url)")
        
        echo "üì¢ Sending deployment notification..."
        gcloud pubsub topics publish ci-notify \
          --message="Production deployment completed successfully! Service URL: ${SERVICE_URL}" \
          --attribute="status=success,environment=production,commit=$COMMIT_SHA,service_url=${SERVICE_URL}" || true
        
        echo "‚úÖ Notification sent"

images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:latest'

substitutions:
  _SERVICE_NAME: 'roastah'
  _REGION: 'us-central1'

timeout: '1800s'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Required IAM permissions for Cloud Build Service Account:
# - roles/run.admin
# - roles/storage.admin  
# - roles/pubsub.publisher (for notifications)
# - roles/secretmanager.secretAccessor
# - roles/artifactregistry.writer 