> Build a **scalable, full-stack, Etsy-style multi-vendor marketplace** called **Roastah.com** — tailored for home and micro coffee roasters. Use modern, enterprise-grade architecture, with performance and extensibility as top priorities. Scaffold a full-stack TypeScript **monorepo** using the following stack and structure:

---

### 🌎 **Project Goals**

* Multi-vendor e-commerce platform
* Stripe Connect Express integration for seller payouts
* Social login (Google, Apple, Facebook)
* Modern, accessible, mobile-first UI
* Modular folder structure and routes
* Fast local dev and scalable backend

---

### 🏗️ **Tech Stack**

#### 🔧 Backend (`apps/backend`)

* **MedusaJS** (Node.js 20, Express-based)
* **PostgreSQL** (via Neon or Supabase)
* **Drizzle ORM**
* **Stripe Connect (Express)** – destination charges
* **Passport.js** – local + OAuth for social logins
* **express-session** (PostgreSQL-backed)
* **Google Cloud Storage** – for product images
* **Meilisearch** – for product search
* **Email via Resend.com or Postmark**

#### 🖥️ Frontend (`apps/frontend`)

* **React 18 + TypeScript + Vite**
* **React Router** – modular routing
* **Tailwind CSS** + **shadcn/ui** + **Radix UI**
* **Framer Motion** – animations
* **React Hook Form + Zod** – forms and validation
* **TanStack React Query** – server state management
* **Lucide React** – icons
* **Recharts** – seller dashboard analytics

#### 📦 Monorepo Structure

* `pnpm` with workspaces:

  * `apps/frontend`
  * `apps/backend`
  * `packages/shared`

---

### 📄 Pages to Scaffold (in `/frontend/pages`)

```
/login
/products, /products/:id
/cart
/checkout
/orders, /orders/:id
/profile
/seller/onboarding
/seller/dashboard
/seller/products, /seller/products/new
/seller/orders, /seller/orders/:id
/seller/payouts
```

---

### 🛒 **MVP Buyer Journey**

1. Visit homepage
2. Browse/search/filter products
3. Add products from multiple sellers to cart
4. Checkout (require login if not already)
5. Enter shipping/billing
6. Pay with Stripe
7. Order confirmation
8. Track order status
9. View past orders
10. Update profile

---

### 🧑‍💼 **MVP Seller Journey**

1. Register/login
2. Complete onboarding (SSN, bank, business info)
3. Stripe Connect Express setup
4. Access seller dashboard
5. Add/edit products
6. Manage stock, shipping
7. View orders & update status
8. View payouts

---

### ⚙️ Infrastructure & Dev Setup

* Docker support for backend (Medusa, PostgreSQL, Meilisearch)
* Use MSW for frontend API mocks
* Local Stripe test mode + Google Cloud Storage emulator
* CORS configured properly between frontend/backend
* TypeScript strict mode, Prettier, ESLint, Husky hooks
* Include `.env.example` files
* Generate a top-level `README.md` with:

  * Setup and dev instructions
  * Stripe/GCS keys location
  * How to run frontend/backend independently
  * How to test checkout flow

---

**❗ Important:**
Do not include placeholder text like lorem ipsum. Use real structure, field names, and demo data where needed. Keep codebase modular, scalable, and enterprise-ready with room for customization. The goal is to have a fully scaffolded baseline of `Roastah.com` that I can immediately build on.